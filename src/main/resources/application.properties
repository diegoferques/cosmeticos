server.port=8081

logging.level.org.springframework.web.client.RestTemplate=DEBUG

# Habilita los de localhost_access_log do Tomcat.
server.tomcat.basedir=log
server.tomcat.accesslog.enabled=false
server.tomcat.accesslog.pattern=%t %a "%r" %s (%D ms)

#mail configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=projetoubeleza@gmail.com
spring.mail.password=cosmeticos


#mail properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

#spring.jpa.show-sql=true
spring.jpa.hibernate.format_sql=true

# Resolve o Bug que nao gera id autoincremento de professionalServices (https://stackoverflow.com/questions/43785716/sequencegenerators-initvalue-and-allocationsize-are-ignored-and-generator-not)
spring.jpa.hibernate.use-new-id-generator-mappings=true

hibernate.id.new_generator_mappings=true
hibernate.dialect=org.hibernate.dialect.H2Dialect


order.unfinished.cron=0 0/10 * * * ?
order.expired.cron=0 0/10 * * * ?

balance.rescue.request.mail.subject=Pedido de RESGATE de pagamento
balance.rescue.request.mail.body=Pedido de %s solicitado pelo usuario de email: %s e idProfessional: %s\n\nInstituicao Financeira: %s\nAgencia: %s\nConta: %s\nTipo de Conta: %s\nTitular: %s\nCPF/CNPJ do Titular: %s

exception.unresolved.destination.subject=Excecao Lancada
exception.unresolved.destination.messagePattern=ExceptionId: {5}\nHora da Ocorrencia: {4}\nSistema Operacional: {0}\nModelo do Aparelho: {1}\nStatus da Falha: {2}\n\nStack Trace:\n\n{3}
exception.unresolved.destination.email=projetoubeleza@gmail.com
exception.unresolved.cron=0 0 0/1 * * ?

#TROQUEI DE 12 PARA 3 EM 3 HORAS, POIS SE TIVER ALGUM PROBLEMA EM UMA TENTATIVA, TEM MAIS VEZES DENTRO DO HORARIO COMERCIAL
order.payment.secheduled.cron=0 0 0/3 * * ?
#A PERIODICIDADE QUE DEVEMOS PESQUISAR PEDIDOS READY2CHARGE PARA EFETUAR A CAPTURA. (DE HORA EM HORA)
order.payment.ready2charge.cron=0 0 0/1 * * ?
#A PERIODICIDADE QUE DEVEMOS PESQUISAR PEDIDOS ACCEPTED PARA ENVIAR RESERVA DE PAGAMENTO. (DE HORA EM HORA)
#order.payment.accepted.cron=0 0 0/1 * * ?
#A DATA QUE DEVE INICIAR AS TENTAVIDAS DE PAGAMENTO. EX.: D-2
order.payment.secheduled.startDay=2
#NUMERO DE DIAS ANTES DA DATA DO AGENDAMENTO PARA COMECAR A NOTIFICACAO AO CLIENTE SE DER ERRO NA RESERVA DO PAGAMENTO
order.payment.secheduled.daysBeforeStartToNotification=1

##### Charging properties
# default
paymnet.charger=oneClickPaymentService
# Segunda opcao, caso a primeira esteja indisponivel.
#paymnet.charger=multiclickPaymentService

#SUPERPAY
superpay.url.transacao = https://homologacao.superpay.com.br/checkout/api/v2/transacao
superpay.estabelecimento = 1501698887865
superpay.numerotransacao.fake=true
#superpay.mock.reserve.response=2
#superpay.mock.capture.response=1
superpay.login = superpay
superpay.senha = superpay


#logging.level.org.springframework.web.client.RestTemplate=DEBUG


# Mensagens enviadas ao app
order.status.OPEN=Aguardando aceite do profissional
order.status.CANCELLED=CANCELADO
order.status.EXECUTED=Ja Executado
order.status.SEMI_CLOSED=Servico Realizado e Aguardando Avaliacao do Atendimento
order.status.AUTO_CLOSED=Encerrado e Pago por Omissao
order.status.CLOSED=Encerrado e Pago
order.status.SCHEDULED=Agendamento Confirmado
order.status.INPROGRESS=Em Andamento
order.status.ACCEPTED=Aceito pelo Profissional
order.status.EXPIRED=Expirado
order.status.READY2CHARGE=Pronto para Pagamento